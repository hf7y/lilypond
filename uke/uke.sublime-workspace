{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"uk",
				"ukulele-tuning"
			],
			[
				"perm",
				"permutations"
			],
			[
				"fing",
				"finger-spacing"
			],
			[
				"elem",
				"element-wrap"
			],
			[
				"count",
				"countup"
			],
			[
				"la",
				"last-dynamics"
			],
			[
				"fi",
				"first-dynamics"
			],
			[
				"note",
				"note-and-beyond"
			],
			[
				"not",
				"note-and-beyond"
			],
			[
				"be",
				"before-first-note"
			],
			[
				"d",
				"dynamics"
			],
			[
				"new",
				"new-note"
			],
			[
				"wr",
				"wrapped-fxn"
			],
			[
				"dp-p",
				"dp-process-bar"
			],
			[
				"ma",
				"max-voices"
			],
			[
				"wra",
				"wrapped-iter"
			],
			[
				"ch",
				"chosen-indicies"
			],
			[
				"random",
				"random-inst-list"
			],
			[
				"ran",
				"random-inst-list"
			],
			[
				"in",
				"index-list"
			],
			[
				"pi",
				"pitch-countdown3"
			],
			[
				"trans",
				"transposition-repeat"
			],
			[
				"pitch",
				"pitch-countdown3"
			],
			[
				"bloo",
				"bloom-chord"
			],
			[
				"make-",
				"make-timesig"
			],
			[
				"chance-",
				"chance-zing-bar"
			],
			[
				"fir",
				"first-note"
			],
			[
				"chance-zing-",
				"chance-zing-melody"
			],
			[
				"make-tied",
				"make-tied-notes"
			],
			[
				"chan",
				"chance-rest"
			],
			[
				"chorale-",
				"chorale-add"
			],
			[
				"chorale-add",
				"chorale-add-w-bar"
			],
			[
				"no",
				"note-list"
			],
			[
				"but",
				"butfirst-bars-chorale"
			],
			[
				"transpose-",
				"transpose-chorale-by-bar"
			],
			[
				"t",
				"t-proc"
			],
			[
				"tra",
				"transposition"
			],
			[
				"ptic",
				"pitch-countdown"
			],
			[
				"pit",
				"pitch-countdown"
			],
			[
				"input",
				"input-chorale"
			],
			[
				"s",
				"sym-chord-pitches"
			],
			[
				"chorale",
				"chorale-add"
			],
			[
				"num",
				"num-voices"
			],
			[
				"desce",
				"descent-music"
			],
			[
				"make-de",
				"make-descent-chorale"
			],
			[
				"make-d",
				"make-descent-melody"
			],
			[
				"dur",
				"durations"
			],
			[
				"music",
				"music-length"
			],
			[
				"first",
				"first-bar"
			],
			[
				"emp",
				"empty-melody"
			],
			[
				"bu",
				"butfirst-bars"
			],
			[
				"mel",
				"melody"
			],
			[
				"but-",
				"butfirst-notes"
			],
			[
				"me",
				"melody"
			],
			[
				"chorale-tri",
				"chorale-trim-right"
			],
			[
				"n",
				"n-bars"
			],
			[
				"chorale-tr",
				"chorale-trim-right"
			],
			[
				"melody-",
				"melody-add-w-bar"
			],
			[
				"make",
				"make-melody"
			],
			[
				"map-to",
				"map-to-voices"
			],
			[
				"rando",
				"random-transposed-chorale"
			],
			[
				"duration",
				"duration-length"
			],
			[
				"inp",
				"input-chorale"
			],
			[
				"cho",
				"chorale"
			],
			[
				"pro",
				"process-cadence"
			],
			[
				"moment",
				"moment-main-denominator"
			],
			[
				"dp-co",
				"dp-coherence"
			],
			[
				"cohere",
				"coherence-count"
			],
			[
				"make-ch",
				"make-chorale-bar"
			],
			[
				"my",
				"my-count"
			],
			[
				"cou",
				"countdown"
			],
			[
				"spl",
				"split-m-ways"
			],
			[
				"mak",
				"make-dot-chorale"
			],
			[
				"dot",
				"dot-play-chorale-bar"
			],
			[
				"dot-",
				"dot-play-chorale-bar"
			],
			[
				"do",
				"dot-play-chorale-bar"
			],
			[
				"chor",
				"chorale-add"
			],
			[
				"melod",
				"melody-add"
			],
			[
				"du",
				"dur-list"
			],
			[
				"disl",
				"display-scheme-music"
			],
			[
				"bar",
				"bar-loop"
			],
			[
				"buzz",
				"buzz-bar"
			],
			[
				"m",
				"melody"
			],
			[
				"S",
				"SequentialMusic"
			],
			[
				"list",
				"list-elems"
			],
			[
				"su",
				"super-chroma"
			],
			[
				"id",
				"identity-proc"
			],
			[
				"con",
				"contextualize"
			],
			[
				"log",
				"log-dur-proc"
			],
			[
				"harmon",
				"harmonic-tree"
			],
			[
				"p",
				"pitch-list"
			],
			[
				"f",
				"forest-melody"
			],
			[
				"ela",
				"elaborate-leaves"
			],
			[
				"el",
				"elaborate-leaves"
			],
			[
				"h",
				"harmonic-forest"
			],
			[
				"har",
				"harmonic-tree"
			],
			[
				"harmoni",
				"harmonic-forest"
			],
			[
				"ge",
				"get-intervals"
			],
			[
				"distru",
				"distribute-forest"
			],
			[
				"rope",
				"rope-leaf"
			],
			[
				"wei",
				"weigh-rope"
			],
			[
				"concat",
				"concat-ropes"
			],
			[
				"displ",
				"display-scheme-music"
			],
			[
				"ro",
				"rope-weight"
			],
			[
				"right",
				"right-weight"
			],
			[
				"prun",
				"prune-x-y"
			],
			[
				"prune",
				"prune-forest-breadth"
			],
			[
				"extra",
				"extract-layer"
			],
			[
				"extract-layer",
				"extract-layer-forest"
			],
			[
				"di",
				"distribute-forest"
			],
			[
				"pitch-tr",
				"pitch-transpose"
			],
			[
				"map-",
				"map-over-forest"
			],
			[
				"map",
				"map-over-tree"
			],
			[
				"b",
				"bredth"
			],
			[
				"x",
				"x-forests"
			],
			[
				"random-p",
				"random-pitch-forest"
			],
			[
				"random-pitch",
				"random-pitch-forest"
			],
			[
				"random-pit",
				"random-pitch-tree"
			],
			[
				"pitc",
				"pitch-transpose"
			],
			[
				"my-",
				"my-pitch-tree"
			],
			[
				"dis",
				"distribute"
			],
			[
				"proc",
				"proc-leaves"
			],
			[
				"ls",
				"lst1"
			],
			[
				"tran",
				"transposed-pitch"
			],
			[
				"nor",
				"normalize-tranposition"
			],
			[
				"integ",
				"integer-length"
			],
			[
				"Staff",
				"StaffGroup"
			],
			[
				"ele",
				"elements"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "\\version \"2.20.0\"\n\n%Donald Knuth's Literate Programming Paradigm\n%https://en.wikipedia.org/wiki/Literate_programming\n\n%The notation *is* the data structure\n\n%Trying to capture a sense of ergonomics, fingering on the ukulele\n\n%Ergonomics *noun*\n%the study of people's efficiency in their working environment.\n\nopen-strings = \\relative c'' { a\\1 e\\2 c\\3 g'\\4 }\n\n#(define (music-property prop)\n\t;returns a single arg function of music\n\t(lambda (music)\n\t\t(ly:music-property music prop)))\n\n#(define (equal-music? mu zic)\n\t(let ((comparisons \n\t\t\t(list (music-property 'name)\n\t\t\t\t  ly:music-length\n\t\t\t\t  (lambda (x) (length ((music-property 'elements) x)))\n\t\t\t\t  (lambda (x) ((music-property 'name) ((music-property 'element) x))))))\n\t\t (letrec ((recursive-compare\n\t\t \t\t\t(lambda (list)\n\t\t\t\t\t \t(if (null? list)\n\t\t\t\t\t \t\t#t\n\t\t\t\t\t \t\t(and\n\t\t\t\t\t \t\t\t(equal? ((car list) mu)\t\n\t\t\t\t\t \t\t\t\t\t((car list) zic))\n\t\t\t\t\t \t\t\t(recursive-compare (cdr list)))))))\n\t\t \t\t (recursive-compare comparisons))))\n\n%structure of open-strings inside lilypond\n% #(display\n% \t(equal-music?\n% \t\topen-strings\n% \t\t(make-music\n% \t\t  'RelativeOctaveMusic\n% \t\t  'element\n% \t\t  (make-music\n% \t\t    'SequentialMusic\n% \t\t    'elements\n% \t\t    (list (make-music\n% \t\t            'NoteEvent\n% \t\t            'articulations\n% \t\t            (list (make-music\n% \t\t                    'StringNumberEvent\n% \t\t                    'string-number\n% \t\t                    1))\n% \t\t            'duration\n% \t\t            (ly:make-duration 2)\n% \t\t            'pitch\n% \t\t            (ly:make-pitch 0 5))\n% \t\t          (make-music\n% \t\t            'NoteEvent\n% \t\t            'articulations\n% \t\t            (list (make-music\n% \t\t                    'StringNumberEvent\n% \t\t                    'string-number\n% \t\t                    2))\n% \t\t            'duration\n% \t\t            (ly:make-duration 2)\n% \t\t            'pitch\n% \t\t            (ly:make-pitch 0 2))\n% \t\t          (make-music\n% \t\t            'NoteEvent\n% \t\t            'articulations\n% \t\t            (list (make-music\n% \t\t                    'StringNumberEvent\n% \t\t                    'string-number\n% \t\t                    3))\n% \t\t            'duration\n% \t\t            (ly:make-duration 2)\n% \t\t            'pitch\n% \t\t            (ly:make-pitch 0 0))\n% \t\t          (make-music\n% \t\t            'NoteEvent\n% \t\t            'articulations\n% \t\t            (list (make-music\n% \t\t                    'StringNumberEvent\n% \t\t                    'string-number\n% \t\t                    4))\n% \t\t            'duration\n% \t\t            (ly:make-duration 2)\n% \t\t            'pitch\n% \t\t            (ly:make-pitch 0 4)))))\n% \t\t))\n\n\n%Literate programming is thinking as you type?\n%Linear verbal programming, right.\n\n\n%The 1234 Rule: Left Hand Technique\n%http://ukulelehunt.com/2020/02/19/the-1234-rule-left-hand-technique/\n\n% 1st finger on 1st fret\n% 2nd finger on 2nd fret\n% 3rd finger on 3rd fret\n% 4th finger on 4th fret\n\n%Lilypond TabStaff behavior\n%https://lilypond.org/doc/v2.19/Documentation/notation/common-notation-for-fretted-strings\n\n% By default pitches are assigned to the lowest playing position on the \n% fret-board (first position). Open strings are automatically preferred. \n% If you would like a certain pitch to be played on a specific string \n% you can add a string number indication to the pitch name. If you donâ€™t \n% want to have string number indications appear in traditional notation, \n% you can override the respective stencil. Usually it will be more \n% comfortable to define the playing position by using the value of \n% minimumFret. The default value for minimumFret is 0.\n\n%build a chord, finger by finger\n\n% #(display-scheme-music\n% \tukulele-tuning)\n\npitch-equal? = #(define-scheme-function\n\t(pitchA pitchB)(ly:pitch? ly:pitch?)\n\t(and\n\t\t(ly:pitch-))\n\n#(define (rm x lst)\n\t(if (null? lst)\n\t\t'()\n\t\t(if (ly:pitch-diff x (car lst))\n\t\t\t(remove x (cdr lst))\n\t\t\t(cons\n\t\t\t\t(car lst)\n\t\t\t\t(rm x (cdr lst))))))\n\n% #(define permute\n% \t(lambda (lst)\n% \t\t(if (= 1 (length lst))\n% \t\t\tlst\n% \t\t\t(map \n% \t\t\t\t(lambda (i)\n% \t\t\t\t\t(map\n% \t\t\t\t\t\t(lambda (j)\n% \t\t\t\t\t\t\t(append\n% \t\t\t\t\t\t\t\t(list i)\n% \t\t\t\t\t\t\t\tj))\n% \t\t\t\t\t\t(permute (rm i lst))))\n% \t\t\t\tlst))))\n\t\t\n#(display (rm (ly:make-pitch 0 0) (list (ly:make-pitch 0 1) (ly:make-pitch 0 0))))\n\n% #(display (permute (list \"a\" \"b\" \"c\")))\n\n% %frets/semitones by finger, in order\n% #(define fingers-frets\n% \t(list\n% \t\t(ly:make-pitch 0 0)\n% \t\t(ly:make-pitch 0 0 1/2)\n% \t\t(ly:make-pitch 0 1)\n% \t\t(ly:make-pitch 0 1 1/2)))\n\n% #(define (pitch-lists-add psa psb)\n% \t(if (or (null? psa) (null? psb))\n% \t\t'()\n% \t\t(cons\n% \t\t\t(ly:pitch-add \n% \t\t\t\t(car psa)\n% \t\t\t\t(car psb))\n% \t\t\t(pitch-lists-add\n% \t\t\t\t(cdr psa)\n% \t\t\t\t(cdr psb)))))\n\n% #(define generate-random-chord\n% \t(lambda (strings fingers)\n% \t\t(let ((permss (permute strings))\n% \t\t\t  (permsf (permute fingers)))\n% \t\t\t (pitch-lists-add\n% \t\t\t \t(list-ref\n% \t\t\t \t\tpermss\n% \t\t\t \t\t(random (length permss)))\n% \t\t\t \t(list-ref\n% \t\t\t \t\tpermsf\n% \t\t\t \t\t(random (length permsf)))))))\n\n\n% #(display-scheme-music\n% \t(generate-random-chord\n% \t\tukulele-tuning\n% \t\tfingers-frets))\n\n% #(define mynotes open-strings)\n\nfirst-note = #(define-music-function\n\t(music)(ly:music?)\n\t(letrec ((element-wrap\n\t\t\t\t(lambda (lst)\n\t\t\t\t\t(if (null? lst)\n\t\t\t\t\t\t'()\n\t\t\t\t\t\t(if (equal? (ly:music-property\n\t\t\t\t\t\t\t\t\t\t(car lst)\n\t\t\t\t\t\t\t\t\t\t'name)\n\t\t\t\t\t\t\t\t\t 'NoteEvent)\n\t\t\t\t\t\t\t(list (car lst))\n\t\t\t\t\t\t\t(cons\n\t\t\t\t\t\t\t\t(car lst)\n\t\t\t\t\t\t\t\t(element-wrap (cdr lst))))))))\n\t\t\t(let ((return (ly:music-deep-copy music)))\n\t\t\t\t(begin\n\t\t\t\t\t(ly:music-set-property! return 'elements (element-wrap (ly:music-property return 'elements)))\n\t\t\t\t\treturn))))\nbutfirst-notes = #(define-music-function\n\t(music)(ly:music?)\n\t(letrec ((element-wrap\n\t\t\t\t(lambda (lst)\n\t\t\t\t\t(if (null? lst)\n\t\t\t\t\t\t'()\n\t\t\t\t\t\t(if (equal? (ly:music-property\n\t\t\t\t\t\t\t\t\t\t(car lst)\n\t\t\t\t\t\t\t\t\t\t'name)\n\t\t\t\t\t\t\t\t\t 'NoteEvent)\n\t\t\t\t\t\t\t(cdr lst)\n\t\t\t\t\t\t\t(element-wrap (cdr lst)))))))\n\t\t\t(let ((return (ly:music-deep-copy music)))\n\t\t\t\t(begin\n\t\t\t\t\t(ly:music-set-property! return 'elements (element-wrap (ly:music-property return 'elements)))\n\t\t\t\t\treturn))))\n\ntest-motif = { c d e f g a b c\\4 }\n\nmynotes = {\n\t% \\displayMusic\n\t#(first-note test-motif)\n\t#(butfirst-notes test-motif)\n}\n\n\\score { \n\t<<\n\t\t\t\n\t\\new Staff {\n\t\t% \\time 6/8\t\n\t\t\\clef treble\n\t\t% \\key aes \\major\n\t\t\\relative c' { \t\n\t\t % Type notes here \n\t\t  \\mynotes\t\t\t\n\t\t}\t\n\t}\n\t\n\t\n\t\\addlyrics {\n\t\t%verse 1\n\t}\n\t\\addlyrics{\n\t\t%verse 2\n\t}\n\t\\addlyrics {\n\t\t%verse 3\n\t}\n\t\\new TabStaff {\n\t\t\\set TabStaff.stringTunings = #ukulele-tuning\n\t\t\\relative c'{\n\t\t\t\\mynotes\n\t\t\t\n\t\t}\n\t}\n>>\n%end score\n}\n",
			"file": "main.ly",
			"file_size": 6389,
			"file_write_time": 132635169019351617,
			"settings":
			{
				"buffer_size": 6488,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "main.ly"
			}
		},
		{
			"file": "main.pdf",
			"settings":
			{
				"buffer_size": 53314,
				"encoding": "Western (Windows 1252)",
				"line_ending": "Unix"
			}
		},
		{
			"file": "A Poor Wayfaring Man of Grief.ly",
			"settings":
			{
				"buffer_size": 2803,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				":w",
				":w - Save"
			],
			[
				"lil",
				"Set Syntax: LilyPond"
			],
			[
				"Package Control: ",
				"Package Control: List Packages"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": true,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/zach/lilypond/uke"
	],
	"file_history":
	[
		"/home/zach/lilypond/linea2/parts/extract.ly",
		"/home/zach/lilypond/linea2/flute.pdf",
		"/home/zach/lilypond/linea2/flute.ly",
		"/home/zach/lilypond/linea2/textures/chance-rest.ly",
		"/home/zach/lilypond/linea2/partII.ly",
		"/home/zach/lilypond/linea2/vn.ly",
		"/home/zach/lilypond/linea2/arrangement.ly",
		"/home/zach/lilypond/linea2/parts/flute.ly",
		"/home/zach/lilypond/linea2/recapitulation.ly",
		"/home/zach/lilypond/linea2/exposition.ly",
		"/home/zach/lilypond/linea2/dot-play.ly",
		"/home/zach/lilypond/linea2/textures/identity.ly",
		"/home/zach/lilypond/linea2/main.ly",
		"/home/zach/lilypond/linea2/texture.ly",
		"/home/zach/lilypond/linea2/contextualize.ly",
		"/home/zach/lilypond/linea2/static.ly",
		"/home/zach/lilypond/linea2/lib.ly",
		"/home/zach/lilypond/linea2/textures/chance-zing.ly",
		"/home/zach/lilypond/linea2/max-voices.ly",
		"/home/zach/lilypond/linea2/textures/chance-air.ly",
		"/home/zach/lilypond/linea2/repetition.ly",
		"/home/zach/lilypond/z/natural-transpose.ily",
		"/home/zach/lilypond/linea2/jazz-stabs.ly",
		"/home/zach/lilypond/linea2/textures/chance-bloom.ly",
		"/home/zach/lilypond/linea2/main.pdf",
		"/home/zach/lilypond/linea2/textures/buzz.ly",
		"/home/zach/lilypond/linea2/chorale.ly",
		"/home/zach/lilypond/linea/math.ly",
		"/home/zach/lilypond/linea/gestures/buzz.ly",
		"/home/zach/lilypond/linea2/linea2.sublime-project",
		"/home/zach/lilypond/linea/linea.sublime-project",
		"/home/zach/lilypond/linea2/linea2.sublime-workspace",
		"/home/zach/lilypond/piano-march/lib.ly",
		"/home/zach/lilypond/piano-march/rope.ly",
		"/home/zach/lilypond/piano-march/tree.ly",
		"/home/zach/lilypond/piano-march/pitch-class-set.ly",
		"/home/zach/lilypond/piano-march/main.ly",
		"/home/zach/lilypond/piano-march/pitch-class-tree.ly",
		"/home/zach/lilypond/piano-march/breath-tree.ly",
		"/home/zach/lilypond/piano-march/pitch-study.ly",
		"/home/zach/Desktop/name.html",
		"/home/zach/lilypond/yw/math.ly",
		"/home/zach/lilypond/yw/rows.ly",
		"/home/zach/lilypond/piano-march/readme.md",
		"/home/zach/lilypond/piano-march/global-variables.ly",
		"/home/zach/lilypond/yw/pf-lib.ly",
		"/home/zach/lilypond/piano-march/gestures.ly",
		"/home/zach/lil",
		"/home/zach/lilypond/yw/main.ly",
		"/home/zach/lilypond/yw/arrangement.ly",
		"/home/zach/lilypond/yw/pc-lib.ly",
		"/home/zach/lilypond/yw/harmony.ly",
		"/home/zach/lilypond/introit/math.ly",
		"/home/zach/lilypond/yw/staff.ily",
		"/home/zach/lilypond/z/list.ily",
		"/home/zach/lilypond/z/timesignature.ily",
		"/home/zach/lilypond/yw/ye.sublime-project",
		"/home/zach/lilypond/linea/gestures/clap.ly",
		"/home/zach/lilypond/linea/rows.ly",
		"/home/zach/lilypond/linea/Recursive Dream.ly",
		"/home/zach/lilypond/linea/arrangement.ly",
		"/home/zach/lilypond/linea/gestures/hiss.ly",
		"/home/zach/lilypond/linea/gestures/crackle.ly",
		"/home/zach/lilypond/linea/gestures/pluck.ly",
		"/home/zach/lilypond/linea/rows.pdf",
		"/home/zach/lilypond/linea/test-math.ly",
		"/home/zach/lilypond/linea/gestures.ily",
		"/home/zach/lilypond/linea/instrument-names.ily",
		"/home/zach/lilypond/linea/multiphonics.ily",
		"/home/zach/lilypond/z/paper.ily",
		"/home/zach/lilypond/linea/cited.html",
		"/home/zach/lilypond/linea/math.pdf",
		"/home/zach/lilypond/linea/data",
		"/home/zach/lilypond/linea/instrumentation.txt",
		"/home/zach/lilypond/z/TimeSignature.ily",
		"/home/zach/lilypond/linea/palette.ly",
		"/home/zach/lilypond/linea/repeat-test.ly",
		"/home/zach/lilypond/durations-example.ly",
		"/home/zach/lilypond/fixed-test.ly",
		"/home/zach/lilypond/z/definitions.ily",
		"/home/zach/lilypond/z/pizz.ily",
		"/home/zach/lilypond/linea/natural-transpose.ily",
		"/home/zach/lilypond/z/note.ily",
		"/home/zach/lilypond/linea/repeat-test.pdf",
		"/home/zach/lilypond/z/triangle-heads.ly",
		"/home/zach/.config/sublime-text-3/Packages/User/palette.sublime-build",
		"/home/zach/lilypond/linea/palette.sublime-build",
		"/home/zach/roche-scrape/ultra-underblow/scrape.sh",
		"/home/zach/lilypond/introit/1 opening fanfare.sublime-workspace",
		"/home/zach/lilypond/introit/1 opening fanfare.ly",
		"/home/zach/guitar.ly",
		"/home/zach/lilypond/introit/1 opening fanfare.pdf",
		"/home/zach/lilypond/introit/nov 12/arpeggio.ly",
		"/home/zach/lilypond/introit/1 opening. fanfarely",
		"/home/zach/lilypond/introit/nov 12/phrase3.pdf",
		"/home/zach/lilypond/introit/phrase1.ly",
		"/home/zach/lilypond/introit/i-lines.ly",
		"/home/zach/lilypond/introit/arpeggio.ly",
		"/home/zach/lilypond/introit/phrase3.ly",
		"/home/zach/lilypond/introit/phrase2.ly",
		"/home/zach/lilypond/introit/arpeggio.pdf",
		"/home/zach/lilypond/introit/materials.ily",
		"/home/zach/lilypond/introit/i.ly",
		"/home/zach/lilypond/introit/i.pdf",
		"/home/zach/lilypond/hello_world.py",
		"/home/zach/.config/sublime-text-3/Packages/User/Lilypond.sublime-build"
	],
	"find":
	{
		"height": 52.0
	},
	"find_in_files":
	{
		"height": 109.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"display",
			"ukulele-tuning",
			"export",
			"range",
			"40",
			"denominat",
			"decohere",
			"max-voices",
			"transpos",
			"map-to-bars",
			"decoh",
			"phrase",
			"range",
			"zing",
			"rest",
			"naturalize",
			"countdown",
			"exposi",
			"#timecode",
			"-add",
			"zing",
			"\"vc ",
			"phrase",
			"range",
			"pitch-countdown",
			"car-pitch",
			"range",
			"first-bar",
			"rest",
			"cadence bar",
			"decoherence",
			"transpose-melody",
			"decoher",
			"dp-coherence",
			"dp-coheren",
			"unreduce",
			"first-bar",
			"timecode",
			"length",
			"start",
			"display",
			"\\\\autochange",
			"display",
			"pitch-class-list",
			"pset",
			"concat",
			"kampul",
			"import",
			"2",
			"map-over-forest",
			"num->pitch-list",
			"all-leaves\\?",
			"all-leaves?",
			"is-leaf\\?",
			" #",
			"skip",
			"set",
			"n-tuplet",
			"play",
			"left-o",
			"CRP",
			"3",
			"time",
			"\\\\no-line ",
			"\\no-line ",
			"#\\(f\\)",
			"crp",
			"6",
			"staccato",
			"#s",
			"#\\(next\\)",
			"#s",
			"#\\(next\\)",
			"altO",
			"#>>",
			"#<<",
			"oage",
			"tactus",
			"left",
			"\\(car pair\\)",
			"\\(cdr pair\\)",
			"\\(car pair\\)",
			"car pair",
			"next",
			"mome3dur",
			"mome2dur",
			"#'\\(fl bn va db\\)",
			"vla",
			"tbn",
			"fl",
			"harmonic gliss.",
			"n-transpo",
			"f8",
			"g",
			"c4",
			"fl ",
			",",
			"up",
			"#\\(function",
			"jett",
			"'vn",
			"n-tra",
			"tbn",
			"tag",
			"\\\\tuplet ",
			"\\tuplet ",
			"\\\\tuplet ",
			"mome3",
			"hiss",
			"'cl",
			"hiss",
			"multiphon",
			"all-insts",
			"rests",
			"tuplet-q",
			"vc",
			"% \\\\timecode",
			"\\\\timecode",
			"hiss",
			"\\\\transpose",
			"\\transpose",
			"autochange",
			"\\\\repeat unfold",
			"\\\\repeat",
			"\\\\repeat unfold",
			")))\n",
			"dur",
			"pitch"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": true,
		"replace_history":
		[
			"recap",
			"air",
			"%#timecode",
			"-add-w-bar",
			"bloom",
			"\"vc\" ",
			"repeat",
			"pitch",
			"zing",
			"first-dot-bar",
			"dot-timecode",
			"oct",
			"}\\n\\\\new Staff {",
			"pitch-list",
			"pitch-class-list",
			"kempul",
			"include",
			"3",
			"int->pset",
			"leaves\\?",
			"leaf\\?",
			"chord",
			"(car (harmony-pitches h))",
			"",
			"#m",
			"(car (harmony-pitches h))",
			"#m",
			"#(f)",
			"#s",
			"#space",
			"#s",
			"alto",
			"#}",
			"#{",
			"page",
			"right",
			"leftrights",
			"lefts",
			"rights",
			"left",
			"lefts",
			"left",
			"mome4dur",
			"mome3dur",
			"mome2dur",
			"#'\\(cl tbn vn vc\\)",
			"va",
			"vla",
			"tbn",
			"overblow",
			"ges",
			"g4",
			"",
			"fl",
			"#\\(writePart",
			"\\\\tuplet-q ",
			"\\\\tuplet-q",
			"tutti",
			"\\\\timecode",
			"% \\\\timecode",
			"\\\\n-transpose",
			"\\\\unfold",
			"durB",
			"pitchB",
			"noteB",
			""
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "main.ly",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6488,
						"regions":
						{
						},
						"selection":
						[
							[
								975,
								975
							]
						],
						"settings":
						{
							"auto_name": "main.ly",
							"syntax": "Packages/SubLilyPond/LilyPond.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 189.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "main.pdf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 53314,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "A Poor Wayfaring Man of Grief.ly",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2803,
						"regions":
						{
						},
						"selection":
						[
							[
								2727,
								2727
							]
						],
						"settings":
						{
							"syntax": "Packages/SubLilyPond/LilyPond.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 39.0
	},
	"input":
	{
		"height": 50.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 309.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "Packages/User/Lilypond.sublime-build",
	"project": "uke.sublime-project",
	"replace":
	{
		"height": 77.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 206.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
